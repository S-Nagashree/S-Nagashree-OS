Best Fit Worst Fit First Fit:
#include <stdio.h>

#define MAX 10

// Print allocation result
void print(char *name, int alloc[], int n) {
    printf("\n%s Allocation:\n", name);
    for (int i = 0; i < n; i++) {
        if (alloc[i] == -1)
            printf("Process %d -> Not Allocated\n", i + 1);
        else
            printf("Process %d -> Block %d\n", i + 1, alloc[i] + 1);
    }
}

// First Fit
void firstFit(int blocks[], int m, int procs[], int n) {
    int alloc[MAX], b[MAX];
    for (int i = 0; i < m; i++) b[i] = blocks[i];
    for (int i = 0; i < n; i++) {
        alloc[i] = -1;
        for (int j = 0; j < m; j++) {
            if (b[j] >= procs[i]) {
                alloc[i] = j;
                b[j] = -1;  
                break;
            }
        }
    }
    print("First Fit", alloc, n);
}

// Best Fit
void bestFit(int blocks[], int m, int procs[], int n) {
    int alloc[MAX], b[MAX];
    for (int i = 0; i < m; i++) b[i] = blocks[i];
    for (int i = 0; i < n; i++) {
        alloc[i] = -1;
        int best = -1;
        for (int j = 0; j < m; j++) {
            if (b[j] >= procs[i] && (best == -1 || b[j] < b[best]))
                best = j;
        }
        if (best != -1) {
            alloc[i] = best;
            b[best] = -1;  
        }
    }
    print("Best Fit", alloc, n);
}

// Worst Fit
void worstFit(int blocks[], int m, int procs[], int n) {
    int alloc[MAX], b[MAX];
    for (int i = 0; i < m; i++) b[i] = blocks[i];
    for (int i = 0; i < n; i++) {
        alloc[i] = -1;
        int worst = -1;
        for (int j = 0; j < m; j++) {
            if (b[j] >= procs[i] && (worst == -1 || b[j] > b[worst]))
                worst = j;
        }
        if (worst != -1) {
            alloc[i] = worst;
            b[worst] = -1;  
        }
    }
    print("Worst Fit", alloc, n);
}

int main() {
    int blocks[MAX], procs[MAX], m, n;

    printf("Enter number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter block sizes:\n");
    for (int i = 0; i < m; i++) scanf("%d", &blocks[i]);

    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter process sizes:\n");
    for (int i = 0; i < n; i++) scanf("%d", &procs[i]);

    firstFit(blocks, m, procs, n);
    bestFit(blocks, m, procs, n);
    worstFit(blocks, m, procs, n);

    return 0;
}

OUTPUT:
Enter number of memory blocks: 5
Enter block sizes:
100 500 200 300 600
Enter number of processes: 4
Enter process sizes:
212 417 112 426

First Fit Allocation:
Process 1 -> Block 2
Process 2 -> Block 5
Process 3 -> Block 3
Process 4 -> Not Allocated

Best Fit Allocation:
Process 1 -> Block 4
Process 2 -> Block 2
Process 3 -> Block 3
Process 4 -> Block 5

Worst Fit Allocation:
Process 1 -> Block 5
Process 2 -> Block 2
Process 3 -> Block 4
Process 4 -> Not Allocated

FIFO Optimal LRU:
#include <stdio.h>

int search(int frames[], int f, int key) {
    for (int i = 0; i < f; i++)
        if (frames[i] == key) return 1;
    return 0;
}

void fifo(int pages[], int n, int f) {
    int frames[10], faults = 0, index = 0;

    for (int i = 0; i < f; i++) frames[i] = -1;

    for (int i = 0; i < n; i++) {
        if (!search(frames, f, pages[i])) {
            frames[index] = pages[i];
            index = (index + 1) % f;
            faults++;
        }
    }

    printf("FIFO Faults: %d\n", faults);
}

void optimal(int pages[], int n, int f) {
    int frames[10], faults = 0;

    for (int i = 0; i < f; i++) frames[i] = -1;

    for (int i = 0; i < n; i++) {
        if (!search(frames, f, pages[i])) {
            int farthest = -1, index = -1;
            for (int j = 0; j < f; j++) {
                int k;
                for (k = i + 1; k < n; k++)
                    if (frames[j] == pages[k]) break;
                if (k > farthest) {
                    farthest = k;
                    index = j;
                }
                if (k == n) {
                    index = j;
                    break;
                }
            }
            if (index == -1) index = 0;
            frames[index] = pages[i];
            faults++;
        }
    }

    printf("Optimal Faults: %d\n", faults);
}


void lru(int pages[], int n, int f) {
    int frames[10], used[10], faults = 0;

    // Initialize frames and usage times
    for (int i = 0; i < f; i++) {
        frames[i] = -1;
        used[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        int found = 0;

        // Check if page already exists
        for (int j = 0; j < f; j++) {
            if (frames[j] == pages[i]) {
                used[j] = i;  // update last used time
                found = 1;
                break;
            }
        }

        // Page fault occurs
        if (!found) {
            int replace = -1;

            // Look for an empty frame
            for (int j = 0; j < f; j++) {
                if (frames[j] == -1) {
                    replace = j;
                    break;
                }
            }

            // If no empty frame, find LRU page
            if (replace == -1) {
                replace = 0;
                for (int j = 1; j < f; j++) {
                    if (used[j] < used[replace])
                        replace = j;
                }
            }

            frames[replace] = pages[i];
            used[replace] = i;
            faults++;
        }
    }

    printf("LRU Faults: %d\n", faults);
}

int main() {
    int pages[100], n, f;

    printf("Enter number of page references: ");
    scanf("%d", &n);
    printf("Enter page reference string:\n");
    for (int i = 0; i < n; i++) scanf("%d", &pages[i]);
    printf("Enter number of frames: ");
    scanf("%d", &f);

    fifo(pages, n, f);
    optimal(pages, n, f);
    lru(pages, n, f);

    return 0;
}

OUTPUT:
Enter number of page references: 20
Enter page reference string:
12 3 2 1 5 2 1 6 2 5 631 3 6 12 4 3
Enter number of frames: 3
FIFO Faults: 14
Optimal Faults: 9
LRU Faults: 11
